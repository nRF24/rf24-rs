/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** The return type for `RF24.getStatusFlags()` */
export interface StatusFlags {
  rxDr: boolean
  txDs: boolean
  txDf: boolean
}
/** The return type for `RF24.availablePipe()` */
export interface AvailablePipe {
  available: boolean
  pipe: number
}
/**
 * Power Amplifier level. The units dBm (decibel-milliwatts or dB<sub>mW</sub>)
 * represents a logarithmic signal loss.
 */
export const enum PaLevel {
  /**
   * | nRF24L01 | Si24R1 with<br>LNA Enabled | Si24R1 with<br>LNA Disabled |
   * | :-------:|:--------------------------:|:---------------------------:|
   * | -18 dBm | -6 dBm | -12 dBm |
   */
  MIN = 0,
  /**
   * | nRF24L01 | Si24R1 with<br>LNA Enabled | Si24R1 with<br>LNA Disabled |
   * | :-------:|:--------------------------:|:---------------------------:|
   * | -12 dBm | 0 dBm | -4 dBm |
   */
  LOW = 1,
  /**
   * | nRF24L01 | Si24R1 with<br>LNA Enabled | Si24R1 with<br>LNA Disabled |
   * | :-------:|:--------------------------:|:---------------------------:|
   * | -6 dBm | 3 dBm | 1 dBm |
   */
  HIGH = 2,
  /**
   * | nRF24L01 | Si24R1 with<br>LNA Enabled | Si24R1 with<br>LNA Disabled |
   * | :-------:|:--------------------------:|:---------------------------:|
   * | 0 dBm | 7 dBm | 4 dBm |
   */
  MAX = 3
}
/** How fast data moves through the air. Units are in bits per second (bps). */
export const enum DataRate {
  /** represents 1 Mbps */
  Mbps1 = 0,
  /** represents 2 Mbps */
  Mbps2 = 1,
  /** represents 250 Kbps */
  Kbps250 = 2
}
/**
 * The length of a CRC checksum that is used (if any).
 *
 * Cyclical Redundancy Checking (CRC) is commonly used to ensure data integrity.
 */
export const enum CrcLength {
  /** represents no CRC checksum is used */
  DISABLED = 0,
  /** represents CRC 8 bit checksum is used */
  BIT8 = 1,
  /** represents CRC 16 bit checksum is used */
  BIT16 = 2
}
/** The possible states of a FIFO. */
export const enum FifoState {
  /** Represent the state of a FIFO when it is full. */
  Full = 0,
  /** Represent the state of a FIFO when it is empty. */
  Empty = 1,
  /** Represent the state of a FIFO when it is not full but not empty either. */
  Occupied = 2
}
export type NodeRF24 = RF24
export declare class RF24 {
  constructor(cePin: number, csPin: number, spiSpeed?: number | undefined | null, devGpioChip?: number | undefined | null, devSpiBus?: number | undefined | null)
  begin(): void
  startListening(): void
  stopListening(): void
  send(buf: Buffer, askNoAck?: boolean | undefined | null): boolean
  write(buf: Buffer, askNoAck?: boolean | undefined | null, startTx?: boolean | undefined | null): boolean
  read(len: number): Buffer
  resend(): boolean
  rewrite(): void
  getLastArc(): number
  isPlusVariant(): boolean
  testRpd(): boolean
  startCarrierWave(level: PaLevel, channel: number): void
  stopCarrierWave(): void
  setLna(enable: boolean): void
  allowAckPayloads(enable: boolean): void
  setAutoAck(enable: boolean): void
  setAutoAckPipe(enable: boolean, pipe: number): void
  allowAskNoAck(enable: boolean): void
  writeAckPayload(pipe: number, buf: Buffer): boolean
  setAutoRetries(delay: number, count: number): void
  setChannel(channel: number): void
  getChannel(): number
  getCrcLength(): CrcLength
  setCrcLength(crcLength: CrcLength): void
  getDataRate(): DataRate
  setDataRate(dataRate: DataRate): void
  available(): boolean
  availablePipe(): AvailablePipe
  /** Use this to discard all 3 layers in the radio's RX FIFO. */
  flushRx(): void
  /** Use this to discard all 3 layers in the radio's TX FIFO. */
  flushTx(): void
  getFifoState(aboutTx: boolean): FifoState
  getPaLevel(): PaLevel
  setPaLevel(paLevel: PaLevel): void
  setPayloadLength(length: number): void
  getPayloadLength(): number
  setDynamicPayloads(enable: boolean): void
  getDynamicPayloadLength(): number
  openRxPipe(pipe: number, address: Buffer): void
  openTxPipe(address: Buffer): void
  /** If the given `pipe` number is  not in range [0, 5], then this function does nothing. */
  closeRxPipe(pipe: number): void
  setAddressLength(length: number): void
  getAddressLength(): number
  powerDown(): void
  powerUp(delay?: number | undefined | null): void
  setStatusFlags(rxDr: boolean, txDs: boolean, txDf: boolean): void
  clearStatusFlags(rxDr: boolean, txDs: boolean, txDf: boolean): void
  update(): void
  getStatusFlags(): StatusFlags
}
