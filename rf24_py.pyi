from enum import Enum, auto

class PaLevel(Enum):
    MIN = auto()
    LOW = auto()
    HIGH = auto()
    MAX = auto()

class CrcLength(Enum):
    DISABLED = auto()
    BIT8 = auto()
    BIT16 = auto()

class FifoState(Enum):
    Full = auto()
    Empty = auto()
    Occupied = auto()

class DataRate(Enum):
    Mbps1 = auto()
    Mbps2 = auto()
    Kbps250 = auto()

class RF24:
    def __init__(
        self, ce_pin: int, cs_pin: int, dev_gpio_chip: int = 0, dev_spi_bus: int = 0
    ) -> None: ...
    def begin(self) -> bool: ...
    def start_listening(self) -> None: ...
    def stop_listening(self) -> None: ...
    def send(self, buf: bytes | bytearray, ask_no_ack: bool) -> bool: ...
    def write(
        self, buf: bytes | bytearray, ask_no_ack: bool, start_tx: bool
    ) -> bool: ...
    def read(self, len: int) -> bytes: ...
    def resend(self) -> bool: ...
    def rewrite(self) -> None: ...
    def get_last_arc(self) -> int: ...
    def is_plus_variant(self) -> bool: ...
    def test_rpd(self) -> bool: ...
    def start_carrier_wave(self, level: PaLevel, channel: int) -> None: ...
    def stop_carrier_wave(self) -> None: ...
    def set_lna(self, enable: bool) -> None: ...
    def allow_ack_payloads(self, enable: bool) -> None: ...
    def set_auto_ack(self, enable: bool) -> None: ...
    def set_auto_ack_pipe(self, enable: bool, pipe: int) -> None: ...
    def allow_ask_no_ack(self, enable: bool) -> None: ...
    def write_ack_payload(self, pipe: int, buf: bytes | bytearray) -> bool: ...
    def set_auto_retries(self, count: int, delay: int) -> None: ...
    def set_channel(self, channel: int) -> None: ...
    def get_channel(self) -> int: ...
    def get_crc_length(self) -> CrcLength: ...
    def set_crc_length(self, crc_length: CrcLength) -> None: ...
    def get_data_rate(self) -> DataRate: ...
    def set_data_rate(self, data_rate: DataRate) -> None: ...
    def available(self) -> bool: ...
    def available_pipe(self) -> tuple[bool, int]: ...
    def flush_rx(self) -> None: ...
    def flush_tx(self) -> None: ...
    def get_fifo_state(self, about_tx: bool) -> FifoState: ...
    def get_pa_level(self) -> PaLevel: ...
    def set_pa_level(self, pa_level: PaLevel) -> None: ...
    def set_payload_length(self, length: int) -> None: ...
    def get_payload_length(self) -> int: ...
    def set_dynamic_payloads(self, enable: bool) -> None: ...
    def get_dynamic_payload_length(self) -> int: ...
    def open_rx_pipe(self, pipe: int, address: bytes | bytearray) -> None: ...
    def open_tx_pipe(self, address: bytes | bytearray) -> None: ...
    def close_rx_pipe(self, pipe: int) -> None: ...
    def set_address_length(self, length: int) -> None: ...
    def get_address_length(self) -> int: ...
    def power_down(self, delay: int | None = None) -> None: ...
    def power_up(self) -> None: ...
    def set_status_flags(self, rx_dr: bool, tx_ds: bool, tx_df: bool) -> None: ...
    def clear_status_flags(self, rx_dr: bool, tx_ds: bool, tx_df: bool) -> None: ...
    def update(self) -> None: ...
    def get_status_flags(self) -> tuple[bool, bool, bool]: ...
