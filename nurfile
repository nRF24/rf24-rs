
# A helper function to display the command being executed.
#
# This also prints the elapsed time the command took to execute.
def --wrapped run-cmd [...cmd: string] {
    let app = if (
        ($cmd | first) == "cargo"
        or ($cmd | first) == "yarn"
    ) {
        ($cmd | first 2) | str join ' '
    } else if (($cmd | first) == "uv") {
        let sub_cmd = $cmd.1
        if ($sub_cmd == "run") {
            $cmd.2
        } else {
            ($cmd | first 2) | str join ' '
        }
    } else {
        ($cmd | first)
    }
    print $"(ansi blue)\nRunning(ansi reset) ($cmd | str join ' ')"
    let elapsed = timeit {|| ^($cmd | first) ...($cmd | skip 1)}
    print $"(ansi magenta)($app) took ($elapsed)(ansi reset)"
}


# Run the test suite and collect coverage data.
#
# Requires the following installed:
# - cargo-llvm-cov
# - cargo-nextest
export def "nur test" [
    --clean (-c) # Purge previous test artifacts. Use to refresh coverage data.
    --profile (-p): string = 'default' # The profile defined in .config/nextest.toml
] {
    if $clean {
        run-cmd cargo llvm-cov clean
    }
    let excluded = [rf24-node rf24-py examples]
    mut cmd = [cargo llvm-cov --no-report --workspace]
    for ex in $excluded {
        $cmd = $cmd | append [--exclude $ex]
    }
    $cmd = $cmd | append [nextest --lib --tests --color always --profile $profile]
    run-cmd ...$cmd
}


# Generate a pretty HTML coverage report.
#
# Pass "--open" to load the built report in your browser
# Requires the following installed:
# - cargo-llvm-cov
# - llvm-pretty-cov
export def --wrapped "nur test pretty-cov" [
    ...args: string # Additional arguments for llvm-pretty-cov.
] {
    run-cmd cargo llvm-cov report --json --output-path coverage.json
    run-cmd llvm-cov-pretty coverage.json ...$args
}


# Generate an HTML coverage report.
#
# Pass "--open" to load the built report in your browser
# Requires cargo-llvm-cov installed.
export def --wrapped "nur test llvm-cov" [
    ...args: string # Additional arguments for `llvm-cov report --html`.
] {
    run-cmd cargo llvm-cov report --html ...$args
}


# Generate lcov.info coverage data.
#
# Useful for codecov uploads or VSCode extensions like "Coverage Gutters".
export def "nur test lcov" [] {
    run-cmd cargo llvm-cov report --lcov --output-path lcov.info
}

# A helper function to install the FFI bindings.
#
# This can also facilitate building docs for the bindings' API.
def build-bindings [dirty: bool, --docs] {
    let is_node_binding_built = "bindings/node/index.d.ts" | path exists
    if (not $dirty) or (not $is_node_binding_built) {
        run-cmd yarn build:debug
    }
    if $docs and ((not $dirty) or (not $is_node_binding_built)) {
        run-cmd yarn docs
    }

    mut uv_args = [sync]
    if $docs {
        $uv_args = $uv_args | append [--group docs]
    }
    let is_py_binding_installed = uv pip show rf24-py | complete | ($in.exit_code == 0)
    if $dirty and $is_py_binding_installed {
        # These args basically skip recompiling the python binding.
        # These can lead to a messy virtual env, but thats what `--dirty` means.
        $uv_args = $uv_args | append [--no-install-project --inexact]
    }
    run-cmd uv ...$uv_args
}

# Install bindings for Node.js and Python.
#
# Requires beforehand setup:
# 1. A python virtual environment activated and `maturin` package installed.
# 2. All node.js dependencies installed via `yarn install`.
export def "nur install" [] {
    build-bindings false
}

export alias "nur i" = nur install

# Serve mkdocs output.
#
# This uses `uv` to drive `mkdocs`.
# This also ensures the bindings are built since their API is part of the docs.
export def "nur docs" [
    --dirty (-d) # Skip re-building bindings and use the previously built version.
    --open (-o) # Open the built docs in your browser.
] {
    build-bindings $dirty --docs
    mut cmd = [
        uv run mkdocs serve --config-file docs/mkdocs.yml
    ]
    if $open {
        $cmd = $cmd | append '--open'
    }
    run-cmd  ...$cmd
}

# Build mkdocs output.
#
# The HTML output will be located in docs/site directory.
# This uses `uv` to drive `mkdocs`.
# This also ensures the bindings are built since their API is part of the docs.
export def "nur docs build" [
    --dirty (-d) # Skip re-building bindings and use the previously built version.
] {
    build-bindings $dirty --docs
    run-cmd uv run mkdocs build --config-file docs/mkdocs.yml
}


# Build the rust API docs.
export def "nur docs rs" [
    --open (-o) # Open the built docs in your browser
] {
    mut cmd = [cargo doc --no-deps --lib -p rf24-rs -p rf24ble-rs]
    if $open {
        $cmd = $cmd | append '--open'
    }
    run-cmd ...$cmd
}


# Run linters and formatters.
#
# Uses clippy and rustfmt on rust packages (crates/ and bindings/).
export def "nur lint" [
    --js, # A flag to lint/format Javascript (and Typescript) sources.
] {
    run-cmd cargo clippy --fix --allow-dirty --allow-staged
    run-cmd cargo fmt
    if ($js) {
        run-cmd yarn lint
        if ("bindings/node/index.d.ts" | path exists) {
            run-cmd yarn format:index
        }
        run-cmd yarn format:examples
    }
}


# Run clippy and rustfmt (on rust examples only).
export def "nur lint examples" [] {
    run-cmd cargo clippy -p examples --fix --allow-dirty --allow-staged
    run-cmd cargo fmt -p examples
}

# Run pre-commit hooks
export def "nur pre-commit" [
    --update (-u), # update pre-commit hooks
    --changes-only (-c), # run pre-commit hooks on changed files only
] {
    if ($update) {
        run-cmd uv run pre-commit autoupdate
    }
    mut args = [run]
    if (not $changes_only) {
        $args = $args | append [--all-files]
    }
    run-cmd uv run pre-commit ...$args
}
