

def --wrapped run-cmd [...cmd: string] {
    let app = if ($cmd | first) == "cargo" {
        ($cmd | first 2) | str join ' '
    } else {
        ($cmd | first)
    }
    print $"(ansi blue)\nRunning(ansi reset) ($cmd | str join ' ')"
    let elapsed = timeit {|| ^($cmd | first) ...($cmd | skip 1)}
    print $"(ansi magenta)($app) took ($elapsed)(ansi reset)"
}


# Run the test suite
def "nur test" [
    --clean (-c) # Purge previous test artifacts. Use to refresh coverage data.
    --profile (-p): string = 'default' # The profile defined in .config/nextest.toml
] {
    if $clean {
        run-cmd cargo llvm-cov clean
    }
    let cmd = (
        [cargo llvm-cov --no-report nextest]
        | append [-p rf24-rs -p rf24ble-rs]
        | append [--lib --tests --color always --profile $profile]
    )
    run-cmd ...$cmd
}


# Generate pretty coverage report
#
# Pass "--open" to load the built report in your browser
def --wrapped "nur test pretty-cov" [
    ...args: string # Additional arguments for llvm-pretty-cov.
] {
    run-cmd cargo llvm-cov report --json --output-path coverage.json
    run-cmd llvm-cov-pretty coverage.json ...$args
}


# Generate detailed coverage report
#
# Pass "--open" to load the built report in your browser
def --wrapped "nur test llvm-cov" [
    ...args: string # Additional arguments for `llvm-cov report --html`.
] {
    run-cmd cargo llvm-cov report --html ...$args
}


# Generate lcov.info
#
# Useful for codecov uploads or VSCode extensions like "Coverage Gutters".
def "nur test lcov" [] {
    run-cmd cargo llvm-cov report --lcov --output-path lcov.info
}


# Serve mkdocs
def "nur docs" [
    --open (-o) # open the built docs in your browser
] {
    mut cmd = [
        mkdocs serve --config-file docs/mkdocs.yml
    ]
    if $open {
        $cmd = $cmd | append '--open'
    }
    run-cmd  ...$cmd
}

# Build mkdocs
def "nur docs build" [] {
    run-cmd mkdocs build --config-file docs/mkdocs.yml
}


# Rust API docs
def "nur docs rs" [
    --open (-o) # open the built docs in your browser
] {
    mut cmd = [cargo doc --no-deps --lib -p rf24-rs -p rf24ble-rs]
    if $open {
        $cmd = $cmd | append '--open'
    }
    run-cmd ...$cmd
}


# Run clippy and rustfmt (on packages only)
def "nur lint" [] {
    let common_args = (
        [-p rf24-rs -p rf24ble-rs -p rf24-node -p rf24-py]
    )
    run-cmd ...(
        [cargo clippy --fix --allow-dirty --allow-staged]
        | append [...$common_args]
    )
    run-cmd ...[cargo fmt ...$common_args]
}


# Run clippy and rustfmt (on examples only)
def "nur lint examples" [] {
    run-cmd cargo clippy -p rf24-rs-examples --fix --allow-dirty --allow-staged
    run-cmd cargo fmt -p rf24-rs-examples
}
